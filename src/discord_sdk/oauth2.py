"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from discord_sdk import models, utils
from discord_sdk._hooks import HookContext
from discord_sdk.types import OptionalNullable, UNSET
from discord_sdk.utils import get_security_from_env
from typing import Any, Optional, Union


class Oauth2(BaseSDK):
    def get_my_authorization(
        self,
        *,
        security: Union[
            models.GetMyOauth2AuthorizationSecurity,
            models.GetMyOauth2AuthorizationSecurityTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.OAuth2GetAuthorizationResponse:
        r"""
        :param security:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        req = self.build_request(
            method="GET",
            path="/oauth2/@me",
            base_url=base_url,
            url_variables=url_variables,
            request=None,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=utils.get_pydantic_model(
                security, models.GetMyOauth2AuthorizationSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="get_my_oauth2_authorization",
                oauth2_scopes=[
                    "activities.read",
                    "activities.write",
                    "applications.builds.read",
                    "applications.builds.upload",
                    "applications.commands",
                    "applications.commands.permissions.update",
                    "applications.commands.update",
                    "applications.entitlements",
                    "applications.store.update",
                    "bot",
                    "connections",
                    "dm_channels.read",
                    "email",
                    "gdm.join",
                    "guilds",
                    "guilds.join",
                    "guilds.members.read",
                    "identify",
                    "messages.read",
                    "openid",
                    "relationships.read",
                    "role_connections.write",
                    "rpc",
                    "rpc.activities.write",
                    "rpc.notifications.read",
                    "rpc.screenshare.read",
                    "rpc.screenshare.write",
                    "rpc.video.read",
                    "rpc.video.write",
                    "rpc.voice.read",
                    "rpc.voice.write",
                    "voice",
                    "webhook.incoming",
                ],
                security_source=get_security_from_env(security, models.Security),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.OAuth2GetAuthorizationResponse
            )
        if utils.match_response(http_res, "4XX", "application/json"):
            data = utils.unmarshal_json(http_res.text, models.ErrorResponseData)
            raise models.ErrorResponse(data=data)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_my_authorization_async(
        self,
        *,
        security: Union[
            models.GetMyOauth2AuthorizationSecurity,
            models.GetMyOauth2AuthorizationSecurityTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> models.OAuth2GetAuthorizationResponse:
        r"""
        :param security:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        req = self.build_request_async(
            method="GET",
            path="/oauth2/@me",
            base_url=base_url,
            url_variables=url_variables,
            request=None,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=utils.get_pydantic_model(
                security, models.GetMyOauth2AuthorizationSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="get_my_oauth2_authorization",
                oauth2_scopes=[
                    "activities.read",
                    "activities.write",
                    "applications.builds.read",
                    "applications.builds.upload",
                    "applications.commands",
                    "applications.commands.permissions.update",
                    "applications.commands.update",
                    "applications.entitlements",
                    "applications.store.update",
                    "bot",
                    "connections",
                    "dm_channels.read",
                    "email",
                    "gdm.join",
                    "guilds",
                    "guilds.join",
                    "guilds.members.read",
                    "identify",
                    "messages.read",
                    "openid",
                    "relationships.read",
                    "role_connections.write",
                    "rpc",
                    "rpc.activities.write",
                    "rpc.notifications.read",
                    "rpc.screenshare.read",
                    "rpc.screenshare.write",
                    "rpc.video.read",
                    "rpc.video.write",
                    "rpc.voice.read",
                    "rpc.voice.write",
                    "voice",
                    "webhook.incoming",
                ],
                security_source=get_security_from_env(security, models.Security),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.OAuth2GetAuthorizationResponse
            )
        if utils.match_response(http_res, "4XX", "application/json"):
            data = utils.unmarshal_json(http_res.text, models.ErrorResponseData)
            raise models.ErrorResponse(data=data)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.SDKError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )
