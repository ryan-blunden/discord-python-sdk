"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, HttpClient
from .sdkconfiguration import SDKConfiguration
from .utils.logger import Logger, get_default_logger
from .utils.retries import RetryConfig
from discord_sdk import models, utils
from discord_sdk._hooks import SDKHooks
from discord_sdk.application_commands import ApplicationCommands
from discord_sdk.application_emojis import ApplicationEmojis
from discord_sdk.application_role_connections import ApplicationRoleConnections
from discord_sdk.applicationentitlements import ApplicationEntitlements
from discord_sdk.applications import Applications
from discord_sdk.automoderationrules import AutoModerationRules
from discord_sdk.bans import Bans
from discord_sdk.channel_invites import ChannelInvites
from discord_sdk.channel_thread_members import ChannelThreadMembers
from discord_sdk.channelfollowers import ChannelFollowers
from discord_sdk.channelmessagereactions import ChannelMessageReactions
from discord_sdk.channelmessages import ChannelMessages
from discord_sdk.channelpermissions import ChannelPermissions
from discord_sdk.channelpins import ChannelPins
from discord_sdk.channelrecipients import ChannelRecipients
from discord_sdk.channels import Channels
from discord_sdk.commands import Commands
from discord_sdk.dms import Dms
from discord_sdk.emojis import Emojis
from discord_sdk.entitlements import Entitlements
from discord_sdk.gateway import Gateway
from discord_sdk.gateway_bot import GatewayBot
from discord_sdk.guild_application_commands import GuildApplicationCommands
from discord_sdk.guild_bans import GuildBans
from discord_sdk.guild_emojis import GuildEmojis
from discord_sdk.guild_integrations import GuildIntegrations
from discord_sdk.guild_members import GuildMembers
from discord_sdk.guild_voice_regions import GuildVoiceRegions
from discord_sdk.guildapplicationcommandpermissions import (
    GuildApplicationCommandPermissions,
)
from discord_sdk.guildchannels import GuildChannels
from discord_sdk.guildmfa import GuildMfa
from discord_sdk.guildpreview import GuildPreview
from discord_sdk.guilds import Guilds
from discord_sdk.guildsoundboardsounds import GuildSoundboardSounds
from discord_sdk.guildstickers import GuildStickers
from discord_sdk.guildtemplates import GuildTemplates
from discord_sdk.guildvoicestates import GuildVoiceStates
from discord_sdk.guildwebhooks import GuildWebhooks
from discord_sdk.guildwelcomescreen import GuildWelcomeScreen
from discord_sdk.invites import Invites
from discord_sdk.messagereactions import MessageReactions
from discord_sdk.messages import Messages
from discord_sdk.my_applications import MyApplications
from discord_sdk.my_guilds import MyGuilds
from discord_sdk.oauth2 import Oauth2
from discord_sdk.oauth2_keys import Oauth2Keys
from discord_sdk.oauth2applications import Oauth2Applications
from discord_sdk.poll_answers import PollAnswers
from discord_sdk.roles import Roles
from discord_sdk.scheduledevents import ScheduledEvents
from discord_sdk.soundboard_sounds import SoundboardSounds
from discord_sdk.soundboarddefaultsounds import SoundboardDefaultSounds
from discord_sdk.stageinstances import StageInstances
from discord_sdk.stickerpacks import StickerPacks
from discord_sdk.stickers import Stickers
from discord_sdk.templates import Templates
from discord_sdk.threads import Threads
from discord_sdk.types import OptionalNullable, UNSET
from discord_sdk.users import Users
from discord_sdk.voiceregions import VoiceRegions
from discord_sdk.webhook_messages import WebhookMessages
from discord_sdk.webhooks import Webhooks
import httpx
from typing import Any, Callable, Dict, Optional, Union


class Discord(BaseSDK):
    r"""Discord HTTP API (Preview): Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
    https://discord.com/developers/docs - Discord Developer Documentation
    """

    oauth2_applications: Oauth2Applications
    users: Users
    my_guilds: MyGuilds
    applications: Applications
    my_applications: MyApplications
    gateway_bot: GatewayBot
    oauth2_keys: Oauth2Keys
    oauth2: Oauth2
    voice_regions: VoiceRegions
    soundboard_default_sounds: SoundboardDefaultSounds
    stage_instances: StageInstances
    sticker_packs: StickerPacks
    gateway: Gateway
    guilds: Guilds
    threads: Threads
    commands: Commands
    guild_application_command_permissions: GuildApplicationCommandPermissions
    channel_message_reactions: ChannelMessageReactions
    messages: Messages
    channels: Channels
    application_role_connections: ApplicationRoleConnections
    application_entitlements: ApplicationEntitlements
    guild_application_commands: GuildApplicationCommands
    message_reactions: MessageReactions
    channel_messages: ChannelMessages
    poll_answers: PollAnswers
    webhook_messages: WebhookMessages
    webhooks: Webhooks
    scheduled_events: ScheduledEvents
    auto_moderation_rules: AutoModerationRules
    guild_voice_states: GuildVoiceStates
    guild_members: GuildMembers
    roles: Roles
    entitlements: Entitlements
    application_commands: ApplicationCommands
    application_emojis: ApplicationEmojis
    emojis: Emojis
    soundboard_sounds: SoundboardSounds
    channel_thread_members: ChannelThreadMembers
    channel_permissions: ChannelPermissions
    channel_recipients: ChannelRecipients
    dms: Dms
    channel_followers: ChannelFollowers
    channel_invites: ChannelInvites
    channel_pins: ChannelPins
    templates: Templates
    guild_soundboard_sounds: GuildSoundboardSounds
    guild_welcome_screen: GuildWelcomeScreen
    guild_integrations: GuildIntegrations
    guild_templates: GuildTemplates
    stickers: Stickers
    guild_stickers: GuildStickers
    guild_webhooks: GuildWebhooks
    guild_channels: GuildChannels
    guild_preview: GuildPreview
    invites: Invites
    guild_voice_regions: GuildVoiceRegions
    guild_emojis: GuildEmojis
    bans: Bans
    guild_bans: GuildBans
    guild_mfa: GuildMfa

    def __init__(
        self,
        bot_token: Optional[Union[Optional[str], Callable[[], Optional[str]]]] = None,
        server_idx: Optional[int] = None,
        server_url: Optional[str] = None,
        url_params: Optional[Dict[str, str]] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None,
        debug_logger: Optional[Logger] = None,
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param bot_token: The bot_token required for authentication
        :param server_idx: The index of the server to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        if client is None:
            client = httpx.Client()

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        if async_client is None:
            async_client = httpx.AsyncClient()

        if debug_logger is None:
            debug_logger = get_default_logger()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."

        security: Any = None
        if callable(bot_token):
            security = lambda: models.Security(bot_token=bot_token())  # pylint: disable=unnecessary-lambda-assignment
        else:
            security = models.Security(bot_token=bot_token)

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        BaseSDK.__init__(
            self,
            SDKConfiguration(
                client=client,
                async_client=async_client,
                security=security,
                server_url=server_url,
                server_idx=server_idx,
                retry_config=retry_config,
                timeout_ms=timeout_ms,
                debug_logger=debug_logger,
            ),
        )

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(
            current_server_url, self.sdk_configuration.client
        )
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        self._init_sdks()

    def _init_sdks(self):
        self.oauth2_applications = Oauth2Applications(self.sdk_configuration)
        self.users = Users(self.sdk_configuration)
        self.my_guilds = MyGuilds(self.sdk_configuration)
        self.applications = Applications(self.sdk_configuration)
        self.my_applications = MyApplications(self.sdk_configuration)
        self.gateway_bot = GatewayBot(self.sdk_configuration)
        self.oauth2_keys = Oauth2Keys(self.sdk_configuration)
        self.oauth2 = Oauth2(self.sdk_configuration)
        self.voice_regions = VoiceRegions(self.sdk_configuration)
        self.soundboard_default_sounds = SoundboardDefaultSounds(self.sdk_configuration)
        self.stage_instances = StageInstances(self.sdk_configuration)
        self.sticker_packs = StickerPacks(self.sdk_configuration)
        self.gateway = Gateway(self.sdk_configuration)
        self.guilds = Guilds(self.sdk_configuration)
        self.threads = Threads(self.sdk_configuration)
        self.commands = Commands(self.sdk_configuration)
        self.guild_application_command_permissions = GuildApplicationCommandPermissions(
            self.sdk_configuration
        )
        self.channel_message_reactions = ChannelMessageReactions(self.sdk_configuration)
        self.messages = Messages(self.sdk_configuration)
        self.channels = Channels(self.sdk_configuration)
        self.application_role_connections = ApplicationRoleConnections(
            self.sdk_configuration
        )
        self.application_entitlements = ApplicationEntitlements(self.sdk_configuration)
        self.guild_application_commands = GuildApplicationCommands(
            self.sdk_configuration
        )
        self.message_reactions = MessageReactions(self.sdk_configuration)
        self.channel_messages = ChannelMessages(self.sdk_configuration)
        self.poll_answers = PollAnswers(self.sdk_configuration)
        self.webhook_messages = WebhookMessages(self.sdk_configuration)
        self.webhooks = Webhooks(self.sdk_configuration)
        self.scheduled_events = ScheduledEvents(self.sdk_configuration)
        self.auto_moderation_rules = AutoModerationRules(self.sdk_configuration)
        self.guild_voice_states = GuildVoiceStates(self.sdk_configuration)
        self.guild_members = GuildMembers(self.sdk_configuration)
        self.roles = Roles(self.sdk_configuration)
        self.entitlements = Entitlements(self.sdk_configuration)
        self.application_commands = ApplicationCommands(self.sdk_configuration)
        self.application_emojis = ApplicationEmojis(self.sdk_configuration)
        self.emojis = Emojis(self.sdk_configuration)
        self.soundboard_sounds = SoundboardSounds(self.sdk_configuration)
        self.channel_thread_members = ChannelThreadMembers(self.sdk_configuration)
        self.channel_permissions = ChannelPermissions(self.sdk_configuration)
        self.channel_recipients = ChannelRecipients(self.sdk_configuration)
        self.dms = Dms(self.sdk_configuration)
        self.channel_followers = ChannelFollowers(self.sdk_configuration)
        self.channel_invites = ChannelInvites(self.sdk_configuration)
        self.channel_pins = ChannelPins(self.sdk_configuration)
        self.templates = Templates(self.sdk_configuration)
        self.guild_soundboard_sounds = GuildSoundboardSounds(self.sdk_configuration)
        self.guild_welcome_screen = GuildWelcomeScreen(self.sdk_configuration)
        self.guild_integrations = GuildIntegrations(self.sdk_configuration)
        self.guild_templates = GuildTemplates(self.sdk_configuration)
        self.stickers = Stickers(self.sdk_configuration)
        self.guild_stickers = GuildStickers(self.sdk_configuration)
        self.guild_webhooks = GuildWebhooks(self.sdk_configuration)
        self.guild_channels = GuildChannels(self.sdk_configuration)
        self.guild_preview = GuildPreview(self.sdk_configuration)
        self.invites = Invites(self.sdk_configuration)
        self.guild_voice_regions = GuildVoiceRegions(self.sdk_configuration)
        self.guild_emojis = GuildEmojis(self.sdk_configuration)
        self.bans = Bans(self.sdk_configuration)
        self.guild_bans = GuildBans(self.sdk_configuration)
        self.guild_mfa = GuildMfa(self.sdk_configuration)
