"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from discord_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from discord_sdk.utils import validate_const
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import AfterValidator
from typing import Literal, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CreateGuildInviteRequestTypedDict(TypedDict):
    max_age: NotRequired[Nullable[int]]
    temporary: NotRequired[Nullable[bool]]
    max_uses: NotRequired[Nullable[int]]
    unique: NotRequired[Nullable[bool]]
    target_user_id: NotRequired[Nullable[str]]
    target_application_id: NotRequired[Nullable[str]]
    target_type: Literal[1]


class CreateGuildInviteRequest(BaseModel):
    max_age: OptionalNullable[int] = UNSET

    temporary: OptionalNullable[bool] = UNSET

    max_uses: OptionalNullable[int] = UNSET

    unique: OptionalNullable[bool] = UNSET

    target_user_id: OptionalNullable[str] = UNSET

    target_application_id: OptionalNullable[str] = UNSET

    TARGET_TYPE: Annotated[
        Annotated[Optional[Literal[1]], AfterValidator(validate_const(1))],
        pydantic.Field(alias="target_type"),
    ] = 1

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "max_age",
            "temporary",
            "max_uses",
            "unique",
            "target_user_id",
            "target_application_id",
            "target_type",
        ]
        nullable_fields = [
            "max_age",
            "temporary",
            "max_uses",
            "unique",
            "target_user_id",
            "target_application_id",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
