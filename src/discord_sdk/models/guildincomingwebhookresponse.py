"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .userresponse import UserResponse, UserResponseTypedDict
from discord_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from discord_sdk.utils import validate_const
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import AfterValidator
from typing import Literal
from typing_extensions import Annotated, NotRequired, TypedDict


class GuildIncomingWebhookResponseTypedDict(TypedDict):
    id: str
    name: str
    application_id: NotRequired[Nullable[str]]
    avatar: NotRequired[Nullable[str]]
    channel_id: NotRequired[Nullable[str]]
    guild_id: NotRequired[Nullable[str]]
    type: Literal[1]
    user: NotRequired[Nullable[UserResponseTypedDict]]
    token: NotRequired[Nullable[str]]
    url: NotRequired[Nullable[str]]


class GuildIncomingWebhookResponse(BaseModel):
    id: str

    name: str

    application_id: OptionalNullable[str] = UNSET

    avatar: OptionalNullable[str] = UNSET

    channel_id: OptionalNullable[str] = UNSET

    guild_id: OptionalNullable[str] = UNSET

    TYPE: Annotated[
        Annotated[Literal[1], AfterValidator(validate_const(1))],
        pydantic.Field(alias="type"),
    ] = 1

    user: OptionalNullable[UserResponse] = UNSET

    token: OptionalNullable[str] = UNSET

    url: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "application_id",
            "avatar",
            "channel_id",
            "guild_id",
            "user",
            "token",
            "url",
        ]
        nullable_fields = [
            "application_id",
            "avatar",
            "channel_id",
            "guild_id",
            "user",
            "token",
            "url",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
