"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .inviteapplicationresponse import (
    InviteApplicationResponse,
    InviteApplicationResponseTypedDict,
)
from .invitechannelresponse import InviteChannelResponse, InviteChannelResponseTypedDict
from .inviteguildresponse import InviteGuildResponse, InviteGuildResponseTypedDict
from .invitestageinstanceresponse import (
    InviteStageInstanceResponse,
    InviteStageInstanceResponseTypedDict,
)
from .scheduledeventresponse import (
    ScheduledEventResponse,
    ScheduledEventResponseTypedDict,
)
from .userresponse import UserResponse, UserResponseTypedDict
from datetime import datetime
from discord_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from discord_sdk.utils import validate_const
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import AfterValidator
from typing import Literal, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GuildInviteResponseTypedDict(TypedDict):
    code: str
    type: Literal[0]
    inviter: NotRequired[Nullable[UserResponseTypedDict]]
    max_age: NotRequired[Nullable[int]]
    created_at: NotRequired[Nullable[datetime]]
    expires_at: NotRequired[Nullable[datetime]]
    is_contact: NotRequired[Nullable[bool]]
    flags: NotRequired[Nullable[int]]
    guild: NotRequired[Nullable[InviteGuildResponseTypedDict]]
    guild_id: NotRequired[Nullable[str]]
    channel: NotRequired[Nullable[InviteChannelResponseTypedDict]]
    stage_instance: NotRequired[Nullable[InviteStageInstanceResponseTypedDict]]
    target_type: Nullable[Literal[1]]
    target_user: NotRequired[Nullable[UserResponseTypedDict]]
    target_application: NotRequired[Nullable[InviteApplicationResponseTypedDict]]
    guild_scheduled_event: NotRequired[Nullable[ScheduledEventResponseTypedDict]]
    uses: NotRequired[Nullable[int]]
    max_uses: NotRequired[Nullable[int]]
    temporary: NotRequired[Nullable[bool]]
    approximate_member_count: NotRequired[Nullable[int]]
    approximate_presence_count: NotRequired[Nullable[int]]


class GuildInviteResponse(BaseModel):
    code: str

    TYPE: Annotated[
        Annotated[Optional[Literal[0]], AfterValidator(validate_const(0))],
        pydantic.Field(alias="type"),
    ] = 0

    inviter: OptionalNullable[UserResponse] = UNSET

    max_age: OptionalNullable[int] = UNSET

    created_at: OptionalNullable[datetime] = UNSET

    expires_at: OptionalNullable[datetime] = UNSET

    is_contact: OptionalNullable[bool] = UNSET

    flags: OptionalNullable[int] = UNSET

    guild: OptionalNullable[InviteGuildResponse] = UNSET

    guild_id: OptionalNullable[str] = UNSET

    channel: OptionalNullable[InviteChannelResponse] = UNSET

    stage_instance: OptionalNullable[InviteStageInstanceResponse] = UNSET

    TARGET_TYPE: Annotated[
        Annotated[OptionalNullable[Literal[1]], AfterValidator(validate_const(1))],
        pydantic.Field(alias="target_type"),
    ] = 1

    target_user: OptionalNullable[UserResponse] = UNSET

    target_application: OptionalNullable[InviteApplicationResponse] = UNSET

    guild_scheduled_event: OptionalNullable[ScheduledEventResponse] = UNSET

    uses: OptionalNullable[int] = UNSET

    max_uses: OptionalNullable[int] = UNSET

    temporary: OptionalNullable[bool] = UNSET

    approximate_member_count: OptionalNullable[int] = UNSET

    approximate_presence_count: OptionalNullable[int] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "type",
            "inviter",
            "max_age",
            "created_at",
            "expires_at",
            "is_contact",
            "flags",
            "guild",
            "guild_id",
            "channel",
            "stage_instance",
            "target_type",
            "target_user",
            "target_application",
            "guild_scheduled_event",
            "uses",
            "max_uses",
            "temporary",
            "approximate_member_count",
            "approximate_presence_count",
        ]
        nullable_fields = [
            "inviter",
            "max_age",
            "created_at",
            "expires_at",
            "is_contact",
            "flags",
            "guild",
            "guild_id",
            "channel",
            "stage_instance",
            "target_type",
            "target_user",
            "target_application",
            "guild_scheduled_event",
            "uses",
            "max_uses",
            "temporary",
            "approximate_member_count",
            "approximate_presence_count",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
