"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .connectedaccountintegrationresponse import (
    ConnectedAccountIntegrationResponse,
    ConnectedAccountIntegrationResponseTypedDict,
)
from discord_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from discord_sdk.utils import validate_const
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import AfterValidator
from typing import List, Literal
from typing_extensions import Annotated, NotRequired, TypedDict


class ConnectedAccountResponseTypedDict(TypedDict):
    id: str
    friend_sync: bool
    show_activity: bool
    two_way_link: bool
    verified: bool
    name: NotRequired[Nullable[str]]
    type: Literal["battlenet"]
    integrations: NotRequired[
        Nullable[List[ConnectedAccountIntegrationResponseTypedDict]]
    ]
    visibility: Literal[0]
    revoked: NotRequired[Nullable[bool]]


class ConnectedAccountResponse(BaseModel):
    id: str

    friend_sync: bool

    show_activity: bool

    two_way_link: bool

    verified: bool

    name: OptionalNullable[str] = UNSET

    TYPE: Annotated[
        Annotated[Literal["battlenet"], AfterValidator(validate_const("battlenet"))],
        pydantic.Field(alias="type"),
    ] = "battlenet"

    integrations: OptionalNullable[List[ConnectedAccountIntegrationResponse]] = UNSET

    VISIBILITY: Annotated[
        Annotated[Literal[0], AfterValidator(validate_const(0))],
        pydantic.Field(alias="visibility"),
    ] = 0

    revoked: OptionalNullable[bool] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["name", "integrations", "revoked"]
        nullable_fields = ["name", "integrations", "revoked"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
