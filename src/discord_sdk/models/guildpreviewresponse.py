"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .emojiresponse import EmojiResponse, EmojiResponseTypedDict
from .guildstickerresponse import GuildStickerResponse, GuildStickerResponseTypedDict
from discord_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List
from typing_extensions import NotRequired, TypedDict


class GuildPreviewResponseTypedDict(TypedDict):
    id: str
    name: str
    features: List[str]
    approximate_member_count: int
    approximate_presence_count: int
    emojis: List[EmojiResponseTypedDict]
    stickers: List[GuildStickerResponseTypedDict]
    icon: NotRequired[Nullable[str]]
    description: NotRequired[Nullable[str]]
    home_header: NotRequired[Nullable[str]]
    splash: NotRequired[Nullable[str]]
    discovery_splash: NotRequired[Nullable[str]]


class GuildPreviewResponse(BaseModel):
    id: str

    name: str

    features: List[str]

    approximate_member_count: int

    approximate_presence_count: int

    emojis: List[EmojiResponse]

    stickers: List[GuildStickerResponse]

    icon: OptionalNullable[str] = UNSET

    description: OptionalNullable[str] = UNSET

    home_header: OptionalNullable[str] = UNSET

    splash: OptionalNullable[str] = UNSET

    discovery_splash: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "icon",
            "description",
            "home_header",
            "splash",
            "discovery_splash",
        ]
        nullable_fields = [
            "icon",
            "description",
            "home_header",
            "splash",
            "discovery_splash",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
