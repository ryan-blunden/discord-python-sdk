"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .githubcheckrun import GithubCheckRun, GithubCheckRunTypedDict
from .githubchecksuite import GithubCheckSuite, GithubCheckSuiteTypedDict
from .githubcomment import GithubComment, GithubCommentTypedDict
from .githubcommit import GithubCommit, GithubCommitTypedDict
from .githubdiscussion import GithubDiscussion, GithubDiscussionTypedDict
from .githubissue import GithubIssue, GithubIssueTypedDict
from .githubrelease import GithubRelease, GithubReleaseTypedDict
from .githubrepository import GithubRepository, GithubRepositoryTypedDict
from .githubreview import GithubReview, GithubReviewTypedDict
from .githubuser import GithubUser, GithubUserTypedDict
from discord_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List
from typing_extensions import NotRequired, TypedDict


class GithubWebhookTypedDict(TypedDict):
    sender: GithubUserTypedDict
    action: NotRequired[Nullable[str]]
    ref: NotRequired[Nullable[str]]
    ref_type: NotRequired[Nullable[str]]
    comment: NotRequired[Nullable[GithubCommentTypedDict]]
    issue: NotRequired[Nullable[GithubIssueTypedDict]]
    pull_request: NotRequired[Nullable[GithubIssueTypedDict]]
    repository: NotRequired[Nullable[GithubRepositoryTypedDict]]
    forkee: NotRequired[Nullable[GithubRepositoryTypedDict]]
    member: NotRequired[Nullable[GithubUserTypedDict]]
    release: NotRequired[Nullable[GithubReleaseTypedDict]]
    head_commit: NotRequired[Nullable[GithubCommitTypedDict]]
    commits: NotRequired[Nullable[List[GithubCommitTypedDict]]]
    forced: NotRequired[Nullable[bool]]
    compare: NotRequired[Nullable[str]]
    review: NotRequired[Nullable[GithubReviewTypedDict]]
    check_run: NotRequired[Nullable[GithubCheckRunTypedDict]]
    check_suite: NotRequired[Nullable[GithubCheckSuiteTypedDict]]
    discussion: NotRequired[Nullable[GithubDiscussionTypedDict]]
    answer: NotRequired[Nullable[GithubCommentTypedDict]]


class GithubWebhook(BaseModel):
    sender: GithubUser

    action: OptionalNullable[str] = UNSET

    ref: OptionalNullable[str] = UNSET

    ref_type: OptionalNullable[str] = UNSET

    comment: OptionalNullable[GithubComment] = UNSET

    issue: OptionalNullable[GithubIssue] = UNSET

    pull_request: OptionalNullable[GithubIssue] = UNSET

    repository: OptionalNullable[GithubRepository] = UNSET

    forkee: OptionalNullable[GithubRepository] = UNSET

    member: OptionalNullable[GithubUser] = UNSET

    release: OptionalNullable[GithubRelease] = UNSET

    head_commit: OptionalNullable[GithubCommit] = UNSET

    commits: OptionalNullable[List[GithubCommit]] = UNSET

    forced: OptionalNullable[bool] = UNSET

    compare: OptionalNullable[str] = UNSET

    review: OptionalNullable[GithubReview] = UNSET

    check_run: OptionalNullable[GithubCheckRun] = UNSET

    check_suite: OptionalNullable[GithubCheckSuite] = UNSET

    discussion: OptionalNullable[GithubDiscussion] = UNSET

    answer: OptionalNullable[GithubComment] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "action",
            "ref",
            "ref_type",
            "comment",
            "issue",
            "pull_request",
            "repository",
            "forkee",
            "member",
            "release",
            "head_commit",
            "commits",
            "forced",
            "compare",
            "review",
            "check_run",
            "check_suite",
            "discussion",
            "answer",
        ]
        nullable_fields = [
            "action",
            "ref",
            "ref_type",
            "comment",
            "issue",
            "pull_request",
            "repository",
            "forkee",
            "member",
            "release",
            "head_commit",
            "commits",
            "forced",
            "compare",
            "review",
            "check_run",
            "check_suite",
            "discussion",
            "answer",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
