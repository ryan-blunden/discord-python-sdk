"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .userresponse import UserResponse, UserResponseTypedDict
from discord_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from discord_sdk.utils import validate_const
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import AfterValidator
from typing import Literal
from typing_extensions import Annotated, NotRequired, TypedDict


class IntegrationApplicationResponseTypedDict(TypedDict):
    id: str
    name: str
    description: str
    icon: NotRequired[Nullable[str]]
    type: Nullable[Literal[4]]
    cover_image: NotRequired[Nullable[str]]
    primary_sku_id: NotRequired[Nullable[str]]
    bot: NotRequired[Nullable[UserResponseTypedDict]]


class IntegrationApplicationResponse(BaseModel):
    id: str

    name: str

    description: str

    icon: OptionalNullable[str] = UNSET

    TYPE: Annotated[
        Annotated[OptionalNullable[Literal[4]], AfterValidator(validate_const(4))],
        pydantic.Field(alias="type"),
    ] = 4

    cover_image: OptionalNullable[str] = UNSET

    primary_sku_id: OptionalNullable[str] = UNSET

    bot: OptionalNullable[UserResponse] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["icon", "type", "cover_image", "primary_sku_id", "bot"]
        nullable_fields = ["icon", "type", "cover_image", "primary_sku_id", "bot"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
