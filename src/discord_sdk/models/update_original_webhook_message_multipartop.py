"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .actionrow import ActionRow, ActionRowTypedDict
from .messageallowedmentionsrequest import (
    MessageAllowedMentionsRequest,
    MessageAllowedMentionsRequestTypedDict,
)
from .messageattachmentrequest import (
    MessageAttachmentRequest,
    MessageAttachmentRequestTypedDict,
)
from .pollcreaterequest import PollCreateRequest, PollCreateRequestTypedDict
from .richembed import RichEmbed, RichEmbedTypedDict
from discord_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from discord_sdk.utils import (
    FieldMetadata,
    MultipartFormMetadata,
    PathParamMetadata,
    QueryParamMetadata,
    RequestMetadata,
    SecurityMetadata,
)
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class UpdateOriginalWebhookMessageMultipartSecurityTypedDict(TypedDict):
    bot_token: NotRequired[str]


class UpdateOriginalWebhookMessageMultipartSecurity(BaseModel):
    bot_token: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True,
                scheme_type="apiKey",
                sub_type="header",
                field_name="Authorization",
            )
        ),
    ] = None


class UpdateOriginalWebhookMessageMultipartRequestBodyTypedDict(TypedDict):
    content: NotRequired[Nullable[str]]
    embeds: NotRequired[Nullable[List[RichEmbedTypedDict]]]
    allowed_mentions: NotRequired[Nullable[MessageAllowedMentionsRequestTypedDict]]
    components: NotRequired[Nullable[List[ActionRowTypedDict]]]
    attachments: NotRequired[Nullable[List[MessageAttachmentRequestTypedDict]]]
    poll: NotRequired[Nullable[PollCreateRequestTypedDict]]
    flags: NotRequired[Nullable[int]]
    files_0: NotRequired[str]
    files_1: NotRequired[str]
    files_2: NotRequired[str]
    files_3: NotRequired[str]
    files_4: NotRequired[str]
    files_5: NotRequired[str]
    files_6: NotRequired[str]
    files_7: NotRequired[str]
    files_8: NotRequired[str]
    files_9: NotRequired[str]


class UpdateOriginalWebhookMessageMultipartRequestBody(BaseModel):
    content: Annotated[OptionalNullable[str], FieldMetadata(multipart=True)] = UNSET

    embeds: Annotated[
        OptionalNullable[List[RichEmbed]],
        FieldMetadata(multipart=MultipartFormMetadata(json=True)),
    ] = UNSET

    allowed_mentions: Annotated[
        OptionalNullable[MessageAllowedMentionsRequest],
        FieldMetadata(multipart=MultipartFormMetadata(json=True)),
    ] = UNSET

    components: Annotated[
        OptionalNullable[List[ActionRow]],
        FieldMetadata(multipart=MultipartFormMetadata(json=True)),
    ] = UNSET

    attachments: Annotated[
        OptionalNullable[List[MessageAttachmentRequest]],
        FieldMetadata(multipart=MultipartFormMetadata(json=True)),
    ] = UNSET

    poll: Annotated[
        OptionalNullable[PollCreateRequest],
        FieldMetadata(multipart=MultipartFormMetadata(json=True)),
    ] = UNSET

    flags: Annotated[OptionalNullable[int], FieldMetadata(multipart=True)] = UNSET

    files_0: Annotated[
        Optional[str], pydantic.Field(alias="files[0]"), FieldMetadata(multipart=True)
    ] = None

    files_1: Annotated[
        Optional[str], pydantic.Field(alias="files[1]"), FieldMetadata(multipart=True)
    ] = None

    files_2: Annotated[
        Optional[str], pydantic.Field(alias="files[2]"), FieldMetadata(multipart=True)
    ] = None

    files_3: Annotated[
        Optional[str], pydantic.Field(alias="files[3]"), FieldMetadata(multipart=True)
    ] = None

    files_4: Annotated[
        Optional[str], pydantic.Field(alias="files[4]"), FieldMetadata(multipart=True)
    ] = None

    files_5: Annotated[
        Optional[str], pydantic.Field(alias="files[5]"), FieldMetadata(multipart=True)
    ] = None

    files_6: Annotated[
        Optional[str], pydantic.Field(alias="files[6]"), FieldMetadata(multipart=True)
    ] = None

    files_7: Annotated[
        Optional[str], pydantic.Field(alias="files[7]"), FieldMetadata(multipart=True)
    ] = None

    files_8: Annotated[
        Optional[str], pydantic.Field(alias="files[8]"), FieldMetadata(multipart=True)
    ] = None

    files_9: Annotated[
        Optional[str], pydantic.Field(alias="files[9]"), FieldMetadata(multipart=True)
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "content",
            "embeds",
            "allowed_mentions",
            "components",
            "attachments",
            "poll",
            "flags",
            "files[0]",
            "files[1]",
            "files[2]",
            "files[3]",
            "files[4]",
            "files[5]",
            "files[6]",
            "files[7]",
            "files[8]",
            "files[9]",
        ]
        nullable_fields = [
            "content",
            "embeds",
            "allowed_mentions",
            "components",
            "attachments",
            "poll",
            "flags",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class UpdateOriginalWebhookMessageMultipartRequestTypedDict(TypedDict):
    webhook_id: str
    webhook_token: str
    request_body: UpdateOriginalWebhookMessageMultipartRequestBodyTypedDict
    thread_id: NotRequired[str]


class UpdateOriginalWebhookMessageMultipartRequest(BaseModel):
    webhook_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]

    webhook_token: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]

    request_body: Annotated[
        UpdateOriginalWebhookMessageMultipartRequestBody,
        FieldMetadata(request=RequestMetadata(media_type="multipart/form-data")),
    ]

    thread_id: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
