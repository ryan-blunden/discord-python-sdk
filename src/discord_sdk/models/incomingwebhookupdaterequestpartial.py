"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .actionrow import ActionRow, ActionRowTypedDict
from .messageallowedmentionsrequest import (
    MessageAllowedMentionsRequest,
    MessageAllowedMentionsRequestTypedDict,
)
from .messageattachmentrequest import (
    MessageAttachmentRequest,
    MessageAttachmentRequestTypedDict,
)
from .pollcreaterequest import PollCreateRequest, PollCreateRequestTypedDict
from .richembed import RichEmbed, RichEmbedTypedDict
from discord_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from discord_sdk.utils import FieldMetadata, FormMetadata
from pydantic import model_serializer
from typing import List
from typing_extensions import Annotated, NotRequired, TypedDict


class IncomingWebhookUpdateRequestPartialTypedDict(TypedDict):
    content: NotRequired[Nullable[str]]
    embeds: NotRequired[Nullable[List[RichEmbedTypedDict]]]
    allowed_mentions: NotRequired[Nullable[MessageAllowedMentionsRequestTypedDict]]
    components: NotRequired[Nullable[List[ActionRowTypedDict]]]
    attachments: NotRequired[Nullable[List[MessageAttachmentRequestTypedDict]]]
    poll: NotRequired[Nullable[PollCreateRequestTypedDict]]
    flags: NotRequired[Nullable[int]]


class IncomingWebhookUpdateRequestPartial(BaseModel):
    content: Annotated[OptionalNullable[str], FieldMetadata(form=True)] = UNSET

    embeds: Annotated[
        OptionalNullable[List[RichEmbed]], FieldMetadata(form=FormMetadata(json=True))
    ] = UNSET

    allowed_mentions: Annotated[
        OptionalNullable[MessageAllowedMentionsRequest],
        FieldMetadata(form=FormMetadata(json=True)),
    ] = UNSET

    components: Annotated[
        OptionalNullable[List[ActionRow]], FieldMetadata(form=FormMetadata(json=True))
    ] = UNSET

    attachments: Annotated[
        OptionalNullable[List[MessageAttachmentRequest]],
        FieldMetadata(form=FormMetadata(json=True)),
    ] = UNSET

    poll: Annotated[
        OptionalNullable[PollCreateRequest], FieldMetadata(form=FormMetadata(json=True))
    ] = UNSET

    flags: Annotated[OptionalNullable[int], FieldMetadata(form=True)] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "content",
            "embeds",
            "allowed_mentions",
            "components",
            "attachments",
            "poll",
            "flags",
        ]
        nullable_fields = [
            "content",
            "embeds",
            "allowed_mentions",
            "components",
            "attachments",
            "poll",
            "flags",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
