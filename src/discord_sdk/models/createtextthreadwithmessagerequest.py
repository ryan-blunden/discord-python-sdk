"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from discord_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from discord_sdk.utils import validate_const
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import AfterValidator
from typing import Literal
from typing_extensions import Annotated, NotRequired, TypedDict


class CreateTextThreadWithMessageRequestTypedDict(TypedDict):
    name: str
    auto_archive_duration: Nullable[Literal[60]]
    rate_limit_per_user: NotRequired[Nullable[int]]


class CreateTextThreadWithMessageRequest(BaseModel):
    name: str

    AUTO_ARCHIVE_DURATION: Annotated[
        Annotated[OptionalNullable[Literal[60]], AfterValidator(validate_const(60))],
        pydantic.Field(alias="auto_archive_duration"),
    ] = 60

    rate_limit_per_user: OptionalNullable[int] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["auto_archive_duration", "rate_limit_per_user"]
        nullable_fields = ["auto_archive_duration", "rate_limit_per_user"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
