"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .widgetactivity import WidgetActivity, WidgetActivityTypedDict
from discord_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from discord_sdk.utils import validate_const
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import AfterValidator
from typing import Any, Literal
from typing_extensions import Annotated, NotRequired, TypedDict


class WidgetMemberTypedDict(TypedDict):
    id: str
    username: str
    status: str
    avatar_url: str
    discriminator: Literal["0000"]
    avatar: NotRequired[Nullable[Any]]
    activity: NotRequired[Nullable[WidgetActivityTypedDict]]
    deaf: NotRequired[Nullable[bool]]
    mute: NotRequired[Nullable[bool]]
    self_deaf: NotRequired[Nullable[bool]]
    self_mute: NotRequired[Nullable[bool]]
    suppress: NotRequired[Nullable[bool]]
    channel_id: NotRequired[Nullable[str]]


class WidgetMember(BaseModel):
    id: str

    username: str

    status: str

    avatar_url: str

    DISCRIMINATOR: Annotated[
        Annotated[Literal["0000"], AfterValidator(validate_const("0000"))],
        pydantic.Field(alias="discriminator"),
    ] = "0000"

    avatar: OptionalNullable[Any] = UNSET

    activity: OptionalNullable[WidgetActivity] = UNSET

    deaf: OptionalNullable[bool] = UNSET

    mute: OptionalNullable[bool] = UNSET

    self_deaf: OptionalNullable[bool] = UNSET

    self_mute: OptionalNullable[bool] = UNSET

    suppress: OptionalNullable[bool] = UNSET

    channel_id: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "avatar",
            "activity",
            "deaf",
            "mute",
            "self_deaf",
            "self_mute",
            "suppress",
            "channel_id",
        ]
        nullable_fields = [
            "avatar",
            "activity",
            "deaf",
            "mute",
            "self_deaf",
            "self_mute",
            "suppress",
            "channel_id",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
