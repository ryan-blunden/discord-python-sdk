"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .invitechannelresponse import InviteChannelResponse, InviteChannelResponseTypedDict
from .userresponse import UserResponse, UserResponseTypedDict
from datetime import datetime
from discord_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from discord_sdk.utils import validate_const
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import AfterValidator
from typing import Literal, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class FriendInviteResponseTypedDict(TypedDict):
    code: str
    type: Literal[0]
    inviter: NotRequired[Nullable[UserResponseTypedDict]]
    max_age: NotRequired[Nullable[int]]
    created_at: NotRequired[Nullable[datetime]]
    expires_at: NotRequired[Nullable[datetime]]
    friends_count: NotRequired[Nullable[int]]
    channel: NotRequired[Nullable[InviteChannelResponseTypedDict]]
    is_contact: NotRequired[Nullable[bool]]
    uses: NotRequired[Nullable[int]]
    max_uses: NotRequired[Nullable[int]]
    flags: NotRequired[Nullable[int]]


class FriendInviteResponse(BaseModel):
    code: str

    TYPE: Annotated[
        Annotated[Optional[Literal[0]], AfterValidator(validate_const(0))],
        pydantic.Field(alias="type"),
    ] = 0

    inviter: OptionalNullable[UserResponse] = UNSET

    max_age: OptionalNullable[int] = UNSET

    created_at: OptionalNullable[datetime] = UNSET

    expires_at: OptionalNullable[datetime] = UNSET

    friends_count: OptionalNullable[int] = UNSET

    channel: OptionalNullable[InviteChannelResponse] = UNSET

    is_contact: OptionalNullable[bool] = UNSET

    uses: OptionalNullable[int] = UNSET

    max_uses: OptionalNullable[int] = UNSET

    flags: OptionalNullable[int] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "type",
            "inviter",
            "max_age",
            "created_at",
            "expires_at",
            "friends_count",
            "channel",
            "is_contact",
            "uses",
            "max_uses",
            "flags",
        ]
        nullable_fields = [
            "inviter",
            "max_age",
            "created_at",
            "expires_at",
            "friends_count",
            "channel",
            "is_contact",
            "uses",
            "max_uses",
            "flags",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
