"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .applicationintegrationtypeconfiguration import (
    ApplicationIntegrationTypeConfiguration,
    ApplicationIntegrationTypeConfigurationTypedDict,
)
from .applicationoauth2installparams import (
    ApplicationOAuth2InstallParams,
    ApplicationOAuth2InstallParamsTypedDict,
)
from discord_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from discord_sdk.utils import validate_const
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import AfterValidator
from typing import Dict, List, Literal
from typing_extensions import Annotated, NotRequired, TypedDict


class DescriptionTypedDict(TypedDict):
    default: str
    localizations: NotRequired[Nullable[Dict[str, str]]]


class Description(BaseModel):
    default: str

    localizations: OptionalNullable[Dict[str, str]] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["localizations"]
        nullable_fields = ["localizations"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ApplicationFormPartialTypedDict(TypedDict):
    description: NotRequired[Nullable[DescriptionTypedDict]]
    icon: NotRequired[Nullable[str]]
    cover_image: NotRequired[Nullable[str]]
    team_id: NotRequired[Nullable[str]]
    flags: NotRequired[Nullable[int]]
    interactions_endpoint_url: NotRequired[Nullable[str]]
    explicit_content_filter: Nullable[Literal[0]]
    max_participants: NotRequired[Nullable[int]]
    type: Nullable[Literal[4]]
    tags: NotRequired[Nullable[List[str]]]
    custom_install_url: NotRequired[Nullable[str]]
    install_params: NotRequired[Nullable[ApplicationOAuth2InstallParamsTypedDict]]
    role_connections_verification_url: NotRequired[Nullable[str]]
    integration_types_config: NotRequired[
        Nullable[Dict[str, ApplicationIntegrationTypeConfigurationTypedDict]]
    ]


class ApplicationFormPartial(BaseModel):
    description: OptionalNullable[Description] = UNSET

    icon: OptionalNullable[str] = UNSET

    cover_image: OptionalNullable[str] = UNSET

    team_id: OptionalNullable[str] = UNSET

    flags: OptionalNullable[int] = UNSET

    interactions_endpoint_url: OptionalNullable[str] = UNSET

    EXPLICIT_CONTENT_FILTER: Annotated[
        Annotated[OptionalNullable[Literal[0]], AfterValidator(validate_const(0))],
        pydantic.Field(alias="explicit_content_filter"),
    ] = 0

    max_participants: OptionalNullable[int] = UNSET

    TYPE: Annotated[
        Annotated[OptionalNullable[Literal[4]], AfterValidator(validate_const(4))],
        pydantic.Field(alias="type"),
    ] = 4

    tags: OptionalNullable[List[str]] = UNSET

    custom_install_url: OptionalNullable[str] = UNSET

    install_params: OptionalNullable[ApplicationOAuth2InstallParams] = UNSET

    role_connections_verification_url: OptionalNullable[str] = UNSET

    integration_types_config: OptionalNullable[
        Dict[str, ApplicationIntegrationTypeConfiguration]
    ] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "description",
            "icon",
            "cover_image",
            "team_id",
            "flags",
            "interactions_endpoint_url",
            "explicit_content_filter",
            "max_participants",
            "type",
            "tags",
            "custom_install_url",
            "install_params",
            "role_connections_verification_url",
            "integration_types_config",
        ]
        nullable_fields = [
            "description",
            "icon",
            "cover_image",
            "team_id",
            "flags",
            "interactions_endpoint_url",
            "explicit_content_filter",
            "max_participants",
            "type",
            "tags",
            "custom_install_url",
            "install_params",
            "role_connections_verification_url",
            "integration_types_config",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
