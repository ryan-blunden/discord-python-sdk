"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .webhookslackembed import WebhookSlackEmbed, WebhookSlackEmbedTypedDict
from discord_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from discord_sdk.utils import FieldMetadata, FormMetadata, MultipartFormMetadata
from pydantic import model_serializer
from typing import List
from typing_extensions import Annotated, NotRequired, TypedDict


class SlackWebhookTypedDict(TypedDict):
    text: NotRequired[Nullable[str]]
    username: NotRequired[Nullable[str]]
    icon_url: NotRequired[Nullable[str]]
    attachments: NotRequired[Nullable[List[WebhookSlackEmbedTypedDict]]]


class SlackWebhook(BaseModel):
    text: Annotated[OptionalNullable[str], FieldMetadata(form=True, multipart=True)] = (
        UNSET
    )

    username: Annotated[
        OptionalNullable[str], FieldMetadata(form=True, multipart=True)
    ] = UNSET

    icon_url: Annotated[
        OptionalNullable[str], FieldMetadata(form=True, multipart=True)
    ] = UNSET

    attachments: Annotated[
        OptionalNullable[List[WebhookSlackEmbed]],
        FieldMetadata(
            form=FormMetadata(json=True), multipart=MultipartFormMetadata(json=True)
        ),
    ] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["text", "username", "icon_url", "attachments"]
        nullable_fields = ["text", "username", "icon_url", "attachments"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
