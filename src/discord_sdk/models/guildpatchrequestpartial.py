"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from discord_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from discord_sdk.utils import validate_const
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import AfterValidator
from typing import List, Literal, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GuildPatchRequestPartialTypedDict(TypedDict):
    name: NotRequired[str]
    description: NotRequired[Nullable[str]]
    region: NotRequired[Nullable[str]]
    icon: NotRequired[Nullable[str]]
    verification_level: Nullable[Literal[0]]
    default_message_notifications: Nullable[Literal[0]]
    explicit_content_filter: Nullable[Literal[0]]
    preferred_locale: Nullable[Literal["ar"]]
    afk_timeout: Nullable[Literal[60]]
    afk_channel_id: NotRequired[Nullable[str]]
    system_channel_id: NotRequired[Nullable[str]]
    owner_id: NotRequired[str]
    splash: NotRequired[Nullable[str]]
    banner: NotRequired[Nullable[str]]
    system_channel_flags: NotRequired[Nullable[int]]
    features: NotRequired[Nullable[List[str]]]
    discovery_splash: NotRequired[Nullable[str]]
    home_header: NotRequired[Nullable[str]]
    rules_channel_id: NotRequired[Nullable[str]]
    safety_alerts_channel_id: NotRequired[Nullable[str]]
    public_updates_channel_id: NotRequired[Nullable[str]]
    premium_progress_bar_enabled: NotRequired[Nullable[bool]]


class GuildPatchRequestPartial(BaseModel):
    name: Optional[str] = None

    description: OptionalNullable[str] = UNSET

    region: OptionalNullable[str] = UNSET

    icon: OptionalNullable[str] = UNSET

    VERIFICATION_LEVEL: Annotated[
        Annotated[OptionalNullable[Literal[0]], AfterValidator(validate_const(0))],
        pydantic.Field(alias="verification_level"),
    ] = 0

    DEFAULT_MESSAGE_NOTIFICATIONS: Annotated[
        Annotated[OptionalNullable[Literal[0]], AfterValidator(validate_const(0))],
        pydantic.Field(alias="default_message_notifications"),
    ] = 0

    EXPLICIT_CONTENT_FILTER: Annotated[
        Annotated[OptionalNullable[Literal[0]], AfterValidator(validate_const(0))],
        pydantic.Field(alias="explicit_content_filter"),
    ] = 0

    PREFERRED_LOCALE: Annotated[
        Annotated[
            OptionalNullable[Literal["ar"]], AfterValidator(validate_const("ar"))
        ],
        pydantic.Field(alias="preferred_locale"),
    ] = "ar"

    AFK_TIMEOUT: Annotated[
        Annotated[OptionalNullable[Literal[60]], AfterValidator(validate_const(60))],
        pydantic.Field(alias="afk_timeout"),
    ] = 60

    afk_channel_id: OptionalNullable[str] = UNSET

    system_channel_id: OptionalNullable[str] = UNSET

    owner_id: Optional[str] = None

    splash: OptionalNullable[str] = UNSET

    banner: OptionalNullable[str] = UNSET

    system_channel_flags: OptionalNullable[int] = UNSET

    features: OptionalNullable[List[str]] = UNSET

    discovery_splash: OptionalNullable[str] = UNSET

    home_header: OptionalNullable[str] = UNSET

    rules_channel_id: OptionalNullable[str] = UNSET

    safety_alerts_channel_id: OptionalNullable[str] = UNSET

    public_updates_channel_id: OptionalNullable[str] = UNSET

    premium_progress_bar_enabled: OptionalNullable[bool] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "name",
            "description",
            "region",
            "icon",
            "verification_level",
            "default_message_notifications",
            "explicit_content_filter",
            "preferred_locale",
            "afk_timeout",
            "afk_channel_id",
            "system_channel_id",
            "owner_id",
            "splash",
            "banner",
            "system_channel_flags",
            "features",
            "discovery_splash",
            "home_header",
            "rules_channel_id",
            "safety_alerts_channel_id",
            "public_updates_channel_id",
            "premium_progress_bar_enabled",
        ]
        nullable_fields = [
            "description",
            "region",
            "icon",
            "verification_level",
            "default_message_notifications",
            "explicit_content_filter",
            "preferred_locale",
            "afk_timeout",
            "afk_channel_id",
            "system_channel_id",
            "splash",
            "banner",
            "system_channel_flags",
            "features",
            "discovery_splash",
            "home_header",
            "rules_channel_id",
            "safety_alerts_channel_id",
            "public_updates_channel_id",
            "premium_progress_bar_enabled",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
