"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .channelpermissionoverwriteresponse import (
    ChannelPermissionOverwriteResponse,
    ChannelPermissionOverwriteResponseTypedDict,
)
from .defaultreactionemojiresponse import (
    DefaultReactionEmojiResponse,
    DefaultReactionEmojiResponseTypedDict,
)
from .guildtemplatechanneltags import (
    GuildTemplateChannelTags,
    GuildTemplateChannelTagsTypedDict,
)
from .iconemojiresponse import IconEmojiResponse, IconEmojiResponseTypedDict
from discord_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from discord_sdk.utils import validate_const
from enum import Enum
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import AfterValidator
from typing import List, Literal
from typing_extensions import Annotated, NotRequired, TypedDict


class GuildTemplateChannelResponseType(int, Enum):
    ZERO = 0
    TWO = 2
    FOUR = 4


class GuildTemplateChannelResponseTypedDict(TypedDict):
    type: GuildTemplateChannelResponseType
    bitrate: int
    user_limit: int
    nsfw: bool
    rate_limit_per_user: int
    permission_overwrites: List[ChannelPermissionOverwriteResponseTypedDict]
    template: str
    id: NotRequired[Nullable[int]]
    name: NotRequired[Nullable[str]]
    position: NotRequired[Nullable[int]]
    topic: NotRequired[Nullable[str]]
    parent_id: NotRequired[Nullable[str]]
    default_auto_archive_duration: Nullable[Literal[60]]
    available_tags: NotRequired[Nullable[List[GuildTemplateChannelTagsTypedDict]]]
    default_reaction_emoji: NotRequired[Nullable[DefaultReactionEmojiResponseTypedDict]]
    default_thread_rate_limit_per_user: NotRequired[Nullable[int]]
    default_sort_order: Nullable[Literal[0]]
    default_forum_layout: Nullable[Literal[0]]
    icon_emoji: NotRequired[Nullable[IconEmojiResponseTypedDict]]
    theme_color: NotRequired[Nullable[int]]


class GuildTemplateChannelResponse(BaseModel):
    type: GuildTemplateChannelResponseType

    bitrate: int

    user_limit: int

    nsfw: bool

    rate_limit_per_user: int

    permission_overwrites: List[ChannelPermissionOverwriteResponse]

    template: str

    id: OptionalNullable[int] = UNSET

    name: OptionalNullable[str] = UNSET

    position: OptionalNullable[int] = UNSET

    topic: OptionalNullable[str] = UNSET

    parent_id: OptionalNullable[str] = UNSET

    DEFAULT_AUTO_ARCHIVE_DURATION: Annotated[
        Annotated[OptionalNullable[Literal[60]], AfterValidator(validate_const(60))],
        pydantic.Field(alias="default_auto_archive_duration"),
    ] = 60

    available_tags: OptionalNullable[List[GuildTemplateChannelTags]] = UNSET

    default_reaction_emoji: OptionalNullable[DefaultReactionEmojiResponse] = UNSET

    default_thread_rate_limit_per_user: OptionalNullable[int] = UNSET

    DEFAULT_SORT_ORDER: Annotated[
        Annotated[OptionalNullable[Literal[0]], AfterValidator(validate_const(0))],
        pydantic.Field(alias="default_sort_order"),
    ] = 0

    DEFAULT_FORUM_LAYOUT: Annotated[
        Annotated[OptionalNullable[Literal[0]], AfterValidator(validate_const(0))],
        pydantic.Field(alias="default_forum_layout"),
    ] = 0

    icon_emoji: OptionalNullable[IconEmojiResponse] = UNSET

    theme_color: OptionalNullable[int] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "id",
            "name",
            "position",
            "topic",
            "parent_id",
            "default_auto_archive_duration",
            "available_tags",
            "default_reaction_emoji",
            "default_thread_rate_limit_per_user",
            "default_sort_order",
            "default_forum_layout",
            "icon_emoji",
            "theme_color",
        ]
        nullable_fields = [
            "id",
            "name",
            "position",
            "topic",
            "parent_id",
            "default_auto_archive_duration",
            "available_tags",
            "default_reaction_emoji",
            "default_thread_rate_limit_per_user",
            "default_sort_order",
            "default_forum_layout",
            "icon_emoji",
            "theme_color",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
